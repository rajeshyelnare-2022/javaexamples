package com.yelnare.rajesh;
import java.net.URL;
import java.net.URLClassLoader;

public class MyC
{
    public static void main(String[] args)
    {
        ClassLoader loader = MyC.class.getClassLoader();
        System.out.println(" loader "+loader);
        System.out.println(loader.getResource("com/yelnare/rajesh/MyC.class"));
        MyC myc = new MyC();
        System.out.println("myc "+whereFrom(myc));
    }
   // https://jenkov.com/tutorials/java-reflection/dynamic-class-loading-reloading.html
    public static String whereFrom(Object o) {
    	  if ( o == null ) {
    	    return null;
    	  }
    	  Class<?> c = o.getClass();
    	  ClassLoader loader = c.getClassLoader();
    	  if ( loader == null ) {
    	    // Try the bootstrap classloader - obtained from the ultimate parent of the System Class Loader.
    	    loader = ClassLoader.getSystemClassLoader();
    	    while ( loader != null && loader.getParent() != null ) {
    	      loader = loader.getParent();
    	    }
    	  }
    	  if (loader != null) {
    	    String name = c.getCanonicalName();
    	    URL resource = loader.getResource(name.replace(".", "/") + ".class");
    	    if ( resource != null ) {
    	      return resource.toString();
    	    }
    	  }
    	  return "Unknown";
    	}
}
